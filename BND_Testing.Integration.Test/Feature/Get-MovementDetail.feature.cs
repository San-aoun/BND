// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BND_Testing.Integration.Test.Feature
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ReadMomentDetialsFeature : object, Xunit.IClassFixture<ReadMomentDetialsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Get-MovementDetail.feature"
#line hidden
        
        public ReadMomentDetialsFeature(ReadMomentDetialsFeature.FixtureData fixtureData, BND_Testing_Integration_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature", "Read Moment detials", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Productype",
                        "ExternalAccount",
                        "CustomerFirstName",
                        "CustomerLastName",
                        "CustomerEmail"});
            table1.AddRow(new string[] {
                        "SavingsRetirment",
                        "Account_Test",
                        "Jane",
                        "Doe",
                        "Test@brandnewday.com"});
#line 4
 testRunner.Given("Set up data with details", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="The user gets the data to display the movement overview and should receive detail" +
            "s.")]
        [Xunit.TraitAttribute("FeatureTitle", "Read Moment detials")]
        [Xunit.TraitAttribute("Description", "The user gets the data to display the movement overview and should receive detail" +
            "s.")]
        public void TheUserGetsTheDataToDisplayTheMovementOverviewAndShouldReceiveDetails_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The user gets the data to display the movement overview and should receive detail" +
                    "s.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 12
 testRunner.When("the user gets movement detial with by Product Type \"SavingsRetirment\" and fillter" +
                        "Type \"Free\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then("the user gets a response with code \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "pageNumber",
                            "pageSize"});
                table2.AddRow(new string[] {
                            "10",
                            "10"});
#line 14
 testRunner.And("the user gets data details response with values", ((string)(null)), table2, "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "account",
                            "movementType",
                            "amount",
                            "accountFrom",
                            "accountTo"});
                table3.AddRow(new string[] {
                            "Brandnewday_Account",
                            "Free",
                            "1000",
                            "Jane_Account",
                            "Joe_Account"});
#line 17
 testRunner.And("the user gets movment details response with values", ((string)(null)), table3, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="The user gets the data to display the movements overview with no map and no movem" +
            "ent type should respond successfully but with empty movements.")]
        [Xunit.TraitAttribute("FeatureTitle", "Read Moment detials")]
        [Xunit.TraitAttribute("Description", "The user gets the data to display the movements overview with no map and no movem" +
            "ent type should respond successfully but with empty movements.")]
        public void TheUserGetsTheDataToDisplayTheMovementsOverviewWithNoMapAndNoMovementTypeShouldRespondSuccessfullyButWithEmptyMovements_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The user gets the data to display the movements overview with no map and no movem" +
                    "ent type should respond successfully but with empty movements.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 22
 testRunner.When("the user gets movement detial with by Product Type \"SavingsRetirment\" and fillter" +
                        "Type \"Tax\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
 testRunner.Then("the user gets a response with code \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "pageNumber",
                            "pageSize"});
#line 24
 testRunner.And("the user gets data details response with values", ((string)(null)), table4, "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "account",
                            "movementType",
                            "amount",
                            "accountFrom",
                            "accountTo"});
#line 26
 testRunner.And("the user gets movment details response with values", ((string)(null)), table5, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="The user gets data to display with an invalid product type and should response an" +
            " error")]
        [Xunit.TraitAttribute("FeatureTitle", "Read Moment detials")]
        [Xunit.TraitAttribute("Description", "The user gets data to display with an invalid product type and should response an" +
            " error")]
        public void TheUserGetsDataToDisplayWithAnInvalidProductTypeAndShouldResponseAnError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The user gets data to display with an invalid product type and should response an" +
                    " error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 33
 testRunner.When("the user gets movement detial with by Product Type \"Test\" and fillterType \"Free\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.Then("the user gets a response with code \"404\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="The user gets data to display the movements overview with an empty filler type an" +
            "d should response an error")]
        [Xunit.TraitAttribute("FeatureTitle", "Read Moment detials")]
        [Xunit.TraitAttribute("Description", "The user gets data to display the movements overview with an empty filler type an" +
            "d should response an error")]
        public void TheUserGetsDataToDisplayTheMovementsOverviewWithAnEmptyFillerTypeAndShouldResponseAnError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The user gets data to display the movements overview with an empty filler type an" +
                    "d should response an error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 37
 testRunner.When("the user gets movement detial with by Product Type \"SavingsRetirment\" and fillter" +
                        "Type \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
 testRunner.Then("the user gets a response with code \"404\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ReadMomentDetialsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ReadMomentDetialsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
